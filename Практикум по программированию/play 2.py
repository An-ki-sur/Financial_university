# Крестики-нолики
'''
2.	Реализовать программу, при помощи которой двое пользователей могут играть в «Крестики-нолики» на поле 3 на 3.
Взаимодействие с программой производится через консоль. Игровое поле изображается в виде трех текстовых строк
и перерисовывается при каждом изменении состояния поля. При запросе данных от пользователя программа сообщает,
что ожидает от пользователя (в частности, координаты новой отметки на поле) и проверяет корректность ввода.
Программа должна уметь автоматически определять, что партия окончена, и сообщать о победе
одного из игроков или о ничьей.
Сама программа НЕ ходит, т.е. не пытается ставить крестики и нолики с целью заполнить линию.
'''

'''
0|0|0
0|0|0
0|0|0
'''
a = []
if a[0][0] == a[0][2] == a[0][4]: pass  # первая строчка
if a[1][0] == a[1][2] == a[1][4]: pass  # вторая строчка
if a[2][0] == a[2][2] == a[2][4]: pass  # третья строчка
if a[0][0] == a[1][2] == a[2][4]: pass  # главная диагональ
if a[1][0] == a[1][2] == a[0][4]: pass  # вторичная диагональ





def check_guess(secret, guess):
    bulls = 0
    cows = 0

    for i in range(4):  # Проверяем быков (правильные цифры на правильных позициях)
        if secret[i] == guess[i]:
            bulls += 1

    for i in guess:  # Проверяем коров (правильные цифры на неправильных позициях)
        if i in secret and i != secret[guess.index(i)]:  # если знак в загаданном числе и индекс не совпадает
            cows += 1

    return bulls, cows


def secrett():  # задаем рандомно наше число для игры
    secret = ''
    a = random.randint(0, 9)
    b = random.randint(0, 9)
    c = random.randint(0, 9)
    d = random.randint(0, 9)
    sec = str(a) + str(b) + str(c) + str(d)
    if len(set(sec)) == 4:  # проверяем, что у нас уникальное значение
        secret = sec
    if secret == '':  # если не нашли, то по новой
        return secrett()
    return secret


def play_game():
    secret_number = secrett()
    attempts = 0

    print('''Добро пожаловать в игру 'Быки и коровы'!
Я загадал четырехзначное число с неповторяющимися(!) цифрами.
Попробуйте угадать его!
Быки - правильные цифры на правильных позициях
Коровы - правильные цифры на неправильных позициях''')
    print("-" * 50)

    while True:
        while True:
            guess = input('Введите четырехзначное число (или "выход" для завершения): ')

            if guess.lower() == 'выход':
                print(f"Игра завершена. Загаданное число было: {secret_number}")
                return

            if x > 3 or x < 0 or y > 1 or y < 1:
                print("Ошибка! Пожалуйста, введите значения X и Y в пределах [1, 3].")
                continue

            break
        attempts += 1

        if a[0][0] == a[0][2] == a[0][4]:  # первая строчка
            print(f"GAME OVER!!! Победили в итоге {a[0][0]}")
            break
        if a[1][0] == a[1][2] == a[1][4]:  # вторая строчка
            print(f"GAME OVER!!! Победили в итоге {a[1][0]}")
            break
        if a[2][0] == a[2][2] == a[2][4]:  # третья строчка
            print(f"GAME OVER!!! Победили в итоге {a[2][0]}")
            break
        if a[0][0] == a[1][2] == a[2][4]:  # главная диагональ
            print(f"GAME OVER!!! Победили в итоге {a[0][0]}")
            break
        if a[1][0] == a[1][2] == a[0][4]:  # вторичная диагональ
            print(f"GAME OVER!!! Победили в итоге {a[1][0]}")
            break

        a = check_guess(secret_number, guess)
        print(f"Попытка {attempts}: {guess} -> Быки: {bulls}, Коровы: {cows}")


play_game()

