# Крестики-нолики
'''
2.	Реализовать программу, при помощи которой двое пользователей могут играть в «Крестики-нолики» на поле 3 на 3.
Взаимодействие с программой производится через консоль. Игровое поле изображается в виде трех текстовых строк
и перерисовывается при каждом изменении состояния поля. При запросе данных от пользователя программа сообщает,
что ожидает от пользователя (в частности, координаты новой отметки на поле) и проверяет корректность ввода.
Программа должна уметь автоматически определять, что партия окончена, и сообщать о победе
одного из игроков или о ничьей.
Сама программа НЕ ходит, т.е. не пытается ставить крестики и нолики с целью заполнить линию.
'''

'''
0|0|0
0|0|0
0|0|0
'''
a = [['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']]
# if a[0][0] == a[0][2] == a[0][4]: pass  # первая строчка
# if a[1][0] == a[1][2] == a[1][4]: pass  # вторая строчка
# if a[2][0] == a[2][2] == a[2][4]: pass  # третья строчка
# if a[0][0] == a[1][2] == a[2][4]: pass  # главная диагональ
# if a[1][0] == a[1][2] == a[0][4]: pass  # вторичная диагональ


def print_pole(a):
    for m in a:
        print(' '.join(f'{elem:3}' for elem in m))


def play_game():
    attempts = 0
    a = [['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']]

    print('''Tic-Tac-Toe''')
    print("-" * 30)
    print('_   _   _ ')
    print('_   _   _ ')
    print('_   _   _ ')

    while True:
        while True:
            if attempts % 2 == 0:
                print('ХОД КРЕСТИКОВ')
            if attempts % 2 == 1:
                print('ХОД НОЛИКОВ')
            x = input('Введите номер строки (или "выход" для завершения): ')
            if x.lower() == 'выход':
                print(f"Игра завершена. Спасибо!")
                return
            y = input('Введите номер столбца (или "выход" для завершения): ')
            if y.lower() == 'выход':
                print(f"Игра завершена. Спасибо!")
                return

            break

        x = int(x)-1
        y = int(y)-1
        if attempts % 2 == 0:
            a[x][y] = 'X'
        else: a[x][y] = '0'

        attempts += 1

        print('Обновленное поле: ')
        print(print_pole(a))

        if a[0][0] == a[0][1] == a[0][2] and a[0][0] != '_':  # первая строчка
            print(f"GAME OVER!!! Победили в итоге {a[0][0]}. Первая строчка")
            break

        if a[1][0] == a[1][1] == a[1][2] and a[1][0] != '_':  # вторая строчка
            print(f"GAME OVER!!! Победили в итоге {a[1][0]}. Вторая строчка")
            break

        if a[2][0] == a[2][1] == a[2][2] and a[2][0] != '_':  # третья строчка
            print(f"GAME OVER!!! Победили в итоге {a[2][0]}. Третья строчка")
            break

        if a[0][0] == a[1][1] == a[2][2] and a[0][0] != '_':  # главная диагональ
            print(f"GAME OVER!!! Победили в итоге {a[0][0]}. Главная диагональ")
            break

        if a[1][0] == a[1][1] == a[0][2] and a[1][0] != '_':  # вторичная диагональ
            print(f"GAME OVER!!! Победили в итоге {a[1][0]}. Вторичная диагональ")
            break

        if a[0][0] == a[1][0] == a[2][0] and a[1][0] != '_':  # первый столбец
            print(f"GAME OVER!!! Победили в итоге {a[1][0]}. первый столбец")
            break

        if a[0][1] == a[1][1] == a[2][1] and a[0][1] != '_':  # второй столбец
            print(f"GAME OVER!!! Победили в итоге {a[0][1]}. Второй столбец")
            break

        if a[0][2] == a[1][2] == a[2][2] and a[0][2] != '_':  # третий столбец
            print(f"GAME OVER!!! Победили в итоге {a[1][2]}. Третий столбец")
            break


play_game()



